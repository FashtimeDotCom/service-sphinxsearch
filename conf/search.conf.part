## SOURCES

source src_swisssearch : def_pqsql
{
    sql_db = search
    sql_attr_uint = num
    sql_attr_uint = rank
    sql_attr_string = label
    sql_attr_string = feature_id
    sql_attr_string = origin
    sql_attr_string = geom_st_box2d
    sql_attr_float = x
    sql_attr_float = y
    sql_field_string = detail
}

source src_address : src_swisssearch
{
    sql_db=kogis
    sql_query = \
        SELECT id \
        , feature_id \
        , detail \
        , label \
        , origin \
        , geom_st_box2d \
        , 6::integer as rank \
        , x \
        , y \
        , num \
        FROM bfs.adressen_sphinx
}

source src_parcel : src_swisssearch
{
    sql_db=dritte
    sql_query = \
        SELECT id \
        , detail \
        , label \
        , origin \
        , geom_st_box2d \
        , 10::integer as rank \
        , x \
        , y \
        , num \
        from kantone.parzellen_sphinx
}

source src_sn25 : src_swisssearch
{
    sql_query = \
        SELECT \
        gid as id \
        , search_name as detail \
        , '<b>'||coalesce(name,'')||'</b> ('||coalesce(kanton,'')||') - '||coalesce(gemname,'') as label \
        , origin as origin \
        , st_box2d(the_geom) as geom_st_box2d \
        , rank as rank \
        , y((the_geom)) as x \
        , x((the_geom)) as y \
        , 1 as num \
        from swiss_search \
        where origin = 'sn25'
}

source src_gg25 : src_swisssearch
{
    sql_query = \
        SELECT \
        gid as id \
        , bfsnr as feature_id \
        , search_name as detail \
        , '<b>'||coalesce(gemname,'')||' ('||coalesce(kanton,'')||')</b>' as label \
        , origin as origin \
        , st_box2d(the_geom) as geom_st_box2d \
        , rank as rank \
        , y(ST_PointOnSurface(swiss_search.the_geom)) AS x \
        , x(ST_PointOnSurface(swiss_search.the_geom)) AS y \
        , 1 as num \
        from swiss_search \
        where origin = 'gg25'
}

source src_kantone : src_swisssearch
{
    sql_query = \
        SELECT \
        gid as id \
        , bfsnr as feature_id \
        , remove_accents(search_name) as detail \
        , '<b>'||name||'</b>' as label \
        , origin as origin \
        , st_box2d(the_geom) as geom_st_box2d \
        , rank as rank \
        , y(ST_PointOnSurface(swiss_search.the_geom)) AS x \
        , x(ST_PointOnSurface(swiss_search.the_geom)) AS y \
        , 1 as num \
        from swiss_search \
        where origin = 'kantone'
}


source src_district : src_swisssearch
{
    sql_query = \
        SELECT \
        gid as id \
        , bfsnr as feature_id \
        , search_name as detail \
        , '<b>'||name||'</b>' as label \
        , origin as origin \
        , st_box2d(the_geom) as geom_st_box2d \
        , rank as rank \
        , y(ST_PointOnSurface(swiss_search.the_geom)) AS x \
        , x(ST_PointOnSurface(swiss_search.the_geom)) AS y \
        , 1 as num \
        from swiss_search \
        where origin = 'district'
}

source src_zipcode : src_swisssearch
{
    sql_db=stopo
    sql_query = \
        SELECT \
        gid as id \
        , os_uuid::text as feature_id \
        , plz::text as detail \
        , '<b>'||coalesce(plz::text,'')||' - '||coalesce(langtext,'')||' ('||coalesce((SELECT ak from tlm.swissboundaries_kantone k where st_intersects(ST_PointOnSurface(p.the_geom),k.the_geom)),'')||')</b>' as label \
        , 'zipcode' as origin \
        , st_box2d(the_geom) as geom_st_box2d\
        , 1 as rank \
        , y(ST_PointOnSurface(the_geom)) AS x \
        , x(ST_PointOnSurface(the_geom)) AS y \
        , 1 as num \
        FROM vd.gabmo_plz p
}

#source src_address_geocoding : src_address
#{
#    sql_attr_float = lat
#    sql_attr_float = lon
#    sql_field_string = geom_quadindex
#    sql_query = \
#        SELECT \
#        gid as id \
#        , search_name as detail \
#        , coalesce(strname1,'')||' '||coalesce(deinr,'')||' <b>'||coalesce(plz,'')||' '||coalesce(ort_27,'')||'</b>' as label \
#        , origin as origin \
#        , quadindex(the_geom) as geom_quadindex \
#        , y(st_transform(st_centroid(the_geom),4326)) as lat \
#        , x(st_transform(st_centroid(the_geom),4326)) as lon \
#        , st_box2d(the_geom) as geom_st_box2d \
#        , rank as rank \
#        , gid as id \
#        , NULLIF(regexp_replace(deinr::text, '[^0-9]'::text, ''::text, 'g'::text), ''::text)::integer as num \
#        from swiss_search \
#        where origin = 'address'
#}

## INDICES

index zipcode
{
    source = src_zipcode
    path = /var/lib/sphinxsearch/data/index/zipcode
    type = plain
    docinfo = extern
    charset_type = utf-8
    min_infix_len = 1
    infix_fields = detail
    enable_star = 1
    ondisk_dict = 0
    preopen = 1
}

index district : zipcode
{
    source = src_district
    path = /var/lib/sphinxsearch/data/index/district
}

index kantone : zipcode
{
    source = src_kantone
    path = /var/lib/sphinxsearch/data/index/kantone
}

index gg25 : zipcode
{
    source = src_gg25
    path = /var/lib/sphinxsearch/data/index/gg25
}

index sn25 : zipcode
{
    source = src_sn25
    path = /var/lib/sphinxsearch/data/index/sn25
}

index parcel : zipcode
{
    source = src_parcel
    path = /var/lib/sphinxsearch/data/index/parcel
}

index address : zipcode
{
    source = src_address
    path = /var/lib/sphinxsearch/data/index/address
}

# only create on demand
#index address_geocoding : zipcode
#{
#    source = src_address_geocoding
#    path = /var/lib/sphinxsearch/data/index/address_geocoding
#}

index swisssearch
{
    type = distributed
    local = zipcode
    local = district
    local = kantone
    local = gg25
    local = sn25
    local = parcel
    local = address
}

